################################################################################
# plot on map (cartopy) variables from DEODE grib files  
################################################################################

import metview as mv
import os
import numpy as np

import matplotlib.pyplot as plt
import cartopy.crs as ccrs

import warnings
warnings.filterwarnings('ignore')

###################################
# Radiance plot
###################################
def plot_radiance_from_grb_message (pathDiagPlots, grbFile, messNun, 
                                    minmap=None, maxmap=None, stepmap=None,bbox=None):
    
    messNun = int(messNun)
    print('Extracting grib message {0} from grib file {1}'.format(messNun,grbFile))

    myFC = mv.read(grbFile) 
    # This is necessary for grib generated by the DEODE workflow
    myFC = mv.grib_set(myFC,['gridType','lambert'])

    # python index start from 0, hence to get the right num message '-1'
    var = myFC[messNun - 1]

    myData  = var.to_dataset()
    varname = list(myData.keys())[0]

    strANtime    = str(myData.time.data)
    strValidTime = str(myData.valid_time.data)
    strFcStep    = str(np.timedelta64(myData.step.data,'h')).replace(" ", "")

    data2Plot = myData[varname].data
    mylat     = myData.latitude.data
    mylon     = myData.longitude.data

    #print('  Var name extracted: {0}'.format(varname))
    #print('  AN time: {0}'.format(strANtime))
    #print('  Valid time: {0}'.format(strValidTime))
    #print('  FC step: {0}'.format(strFcStep))

    myMinT   = int(np.nanmin(data2Plot))
    myMaxT   = int(np.nanmax(data2Plot))
    myMeanT  = int(np.nanmean(data2Plot))

    strStats = 'min/max/mean: ' + str(myMinT) + '/' + str(myMaxT) + '/' + str(myMeanT)   
    
    myMin  = int(np.nanmin(data2Plot))
    myMax  = int(np.nanmax(data2Plot))

    if messNun == 5:
        myStep = 2
    else:
        myStep = 5
        
    width_F  = 12
    height_F = 12

    plt.figure(figsize=(width_F,height_F),dpi=100)
    ax = plt.subplot(1, 1, 1, projection=ccrs.PlateCarree())

    plt.title('grb message: ' + str(messNun) + ' - AN time/FC step: ' + strANtime + '/' + strFcStep + '\n ' + strStats)

    if minmap is not None: 
        myMin = int(minmap)
    
    if maxmap is not None: 
        myMax = int(maxmap)
    
    if stepmap is not None:
        myStep = int(stepmap)
    
    bounds = np.arange(myMin,myMax,myStep)
    
    #strCmap = 'gist_yarg_r'
    strCmap = 'gist_yarg'
    
    #im = plt.contourf(mylon, mylat,data2Plot, 60,transform=ccrs.PlateCarree())
    im = plt.pcolormesh(mylon, mylat,data2Plot,transform=ccrs.PlateCarree(),cmap=strCmap, vmin=bounds[0], vmax=bounds[len(bounds)-1])                    
    ax.coastlines()
    ax.gridlines(draw_labels=["top", "left"])
    if bbox is not None: 
        ax.set_extent(bbox, crs=ccrs.PlateCarree())    
    
    plt.colorbar(im, location='bottom', boundaries=bounds,ticks=bounds,extend='both',shrink=0.7, pad=0.06) 
    
    if not os.path.exists(pathDiagPlots):
        os.makedirs(pathDiagPlots)
            
    myPng = 'radianceGrbMess.'+ str(messNun) +'.AN'+strANtime+'.FC'+strFcStep+'.png'

    plotname = os.path.join(pathDiagPlots, myPng)    
    plt.savefig(plotname)

    print('Radiance map saved as: ' +plotname)

    plt.close()
    #plt.ioff()
    
    return None

###################################
# precipitation plot
###################################
def plot_precipitation_from_grb (pathDiagPlots, grbFile, grbFile2, strAccPre, 
                                 minmap=None, maxmap=None, stepmap=None,bbox=None):
        
    myFC = mv.read(grbFile) 
    myFC = mv.grib_set(myFC,["gridType",'lambert'])

    myFC2 = mv.read(grbFile2) 
    myFC2 = mv.grib_set(myFC2,["gridType",'lambert'])

    tirf2 = myFC2.select(shortName="tirf")
    tirf1 = myFC.select(shortName="tirf")

    tsnowp2 = myFC2.select(shortName="tsnowp")
    tsnowp1 = myFC.select(shortName="tsnowp")

    tgrp2 = myFC2.select(shortName="tgrp")
    tgrp1 = myFC.select(shortName="tgrp")

    tp2 = tirf2 + tsnowp2 + tgrp2
    tp1 = tirf1 + tsnowp1 + tgrp1

    acc_tp = tp2 - tp1
    
    myData  = acc_tp.to_dataset()
    varname = list(myData.keys())[0]

    strANtime    = str(myData.time.data)
    strValidTime = str(myData.valid_time.data)
    
    strFcStep    = str(np.timedelta64(myData.step.data,'h')).replace(" ", "")

    data2Plot = myData[varname].data
    mylat     = myData.latitude.data
    mylon     = myData.longitude.data
    strUnits  = myData[varname].attrs['units']

    #print('  Var name extracted: {0}'.format(varname))
    #print('  units: {0}'.format(strUnits))
    #print('  AN time: {0}'.format(strANtime))
    #print('  Valid time: {0}'.format(strValidTime))
    #print('  FC step: {0}'.format(strFcStep))

    myMinT   = np.nanmin(data2Plot)
    myMaxT   = np.nanmax(data2Plot)
    myMeanT  = np.nanmean(data2Plot)

    strStats = 'min/max/mean: ' + str(f"{myMinT:.3f}") + '/' + str(f"{myMaxT:.3f}") + '/' + str(f"{myMeanT:.3f}")   
    
    myMin  = 1
    myMax  = int(np.nanmax(data2Plot))
    myStep = 2

    if myMax <= myMin:
        print('total acc precipitation less then 1, nothing to plot')
        return None
    
    width_F  = 12
    height_F = 12

    plt.figure(figsize=(width_F,height_F),dpi=100)
    ax = plt.subplot(1, 1, 1, projection=ccrs.PlateCarree())

    plt.title(strAccPre + ' accPrep tot acc prec (' + strUnits +') - AN time/FC step: ' + strANtime + '/' + strFcStep + '\n ' + strStats )
    
    if minmap is not None: 
        myMin = int(minmap)
    
    if maxmap is not None: 
        myMax = int(maxmap)
    
    if stepmap is not None:
        myStep = int(stepmap)
    
    bounds = np.arange(myMin,myMax,myStep)

    strCmap = 'ocean_r'
    #im = plt.contourf(mylon, mylat,data2Plot, 60,transform=ccrs.PlateCarree())
    im = plt.pcolormesh(mylon, mylat,data2Plot, transform=ccrs.PlateCarree(),cmap=strCmap, vmin=bounds[0], vmax=bounds[len(bounds)-1])                    
    ax.coastlines()
    ax.gridlines(draw_labels=["top", "left"])
    if bbox is not None: 
        ax.set_extent(bbox, crs=ccrs.PlateCarree())    
    
    plt.colorbar(im, location='bottom', boundaries=bounds,ticks=bounds,extend='both',shrink=0.7, pad=0.06) 
    
    if not os.path.exists(pathDiagPlots):
        os.makedirs(pathDiagPlots)
            
    myPng = 'accPrec.'+strAccPre+'.AN'+strANtime+'.FC'+strFcStep+'.png'

    plotname = os.path.join(pathDiagPlots, myPng)    
    plt.savefig(plotname)

    print('Acc prep map saved as: ' +plotname)

    plt.close()
    #plt.ioff()

    return None

###################################
# precipitation plot ECMWF
###################################
def plot_precipitation_from_grb_ec (pathDiagPlots, grbFile, grbFile2, strAccPre, 
                                    minmap=None, maxmap=None, stepmap=None, bbox=None):
    
    
    myFC = mv.read(grbFile) 
    myFC2 = mv.read(grbFile2) 
 
    tp2 = myFC2.select(shortName="tp")
    tp1 = myFC.select(shortName="tp")

    acc_tp = (tp2 - tp1)*1000.
    
    myData  = acc_tp.to_dataset()
    varname = list(myData.keys())[0]

    strANtime    = str(myData.time.data)
    strValidTime = str(myData.valid_time.data)
    
    strFcStep    = str(np.timedelta64(myData.step.data,'h')).replace(" ", "")

    data2Plot = myData[varname].data
    mylat     = myData.latitude.data
    mylon     = myData.longitude.data
    strUnits  = myData[varname].attrs['units']

    #print('  Var name extracted: {0}'.format(varname))
    #print('  units: {0}'.format(strUnits))
    #print('  AN time: {0}'.format(strANtime))
    #print('  Valid time: {0}'.format(strValidTime))
    #print('  FC step: {0}'.format(strFcStep))

    myMinT   = np.nanmin(data2Plot)
    myMaxT   = np.nanmax(data2Plot)
    myMeanT  = np.nanmean(data2Plot)

    strStats = 'min/max/mean: ' + str(f"{myMinT:.3f}") + '/' + str(f"{myMaxT:.3f}") + '/' + str(f"{myMeanT:.3f}")   
    
    myMin  = 1
    myMax  = int(np.nanmax(data2Plot))
    myStep = 2

    if myMax <= myMin:
        print('total acc precipitation less then 1, nothing to plot')
        return None
    
    width_F  = 12
    height_F = 12

    plt.figure(figsize=(width_F,height_F),dpi=100)
    ax = plt.subplot(1, 1, 1, projection=ccrs.PlateCarree())

    plt.title(strAccPre + ' accPrep tot acc prec (' + strUnits +') - AN time/FC step: ' + strANtime + '/' + strFcStep + '\n ' +  strStats)
    
    if minmap is not None: 
        myMin = int(minmap)
    
    if maxmap is not None: 
        myMax = int(maxmap)
    
    if stepmap is not None:
        myStep = int(stepmap)
    
    bounds = np.arange(myMin,myMax,myStep)

    strCmap = 'ocean_r'
    #im = plt.contourf(mylon, mylat,data2Plot, 60,transform=ccrs.PlateCarree())
    im = plt.pcolormesh(mylon, mylat,data2Plot, transform=ccrs.PlateCarree(),cmap=strCmap, vmin=bounds[0], vmax=bounds[len(bounds)-1])                    
    ax.coastlines()
    ax.gridlines(draw_labels=["top", "left"])
    
    if bbox is not None: 
        ax.set_extent(bbox, crs=ccrs.PlateCarree())

    plt.colorbar(im, location='bottom', boundaries=bounds,ticks=bounds,extend='both',shrink=0.7, pad=0.06) 
    
    if not os.path.exists(pathDiagPlots):
        os.makedirs(pathDiagPlots)
            
    myPng = 'accPrec.'+strAccPre+'.AN'+strANtime+'.FC'+strFcStep+'.png'

    plotname = os.path.join(pathDiagPlots, myPng)    
    plt.savefig(plotname)

    print('Acc prep map saved as: ' +plotname)

    plt.close()
    #plt.ioff()

###################################
# winds plot
###################################
def plot_winds_from_grb (pathDiagPlots, grbFile, 
                         minmapWS=None, maxmapWS=None, stepmapWS=None,
                         minmapWG=None, maxmapWG=None, stepmapWG=None,
                         bbox=None):
    
    myFC = mv.read(grbFile) 
    myFC = mv.grib_set(myFC,["gridType",'lambert'])

    u_10m =  myFC.select(shortName='10u')
    v_10m =  myFC.select(shortName='10v')
    windSpeed = mv.sqrt(u_10m*u_10m + v_10m*v_10m)
    
    ugst_10m =  myFC.select(shortName='10efg')
    vgst_10m =  myFC.select(shortName='10nfg')
    windGust = mv.sqrt(ugst_10m*ugst_10m + vgst_10m*vgst_10m)
    
    myWindSpeed  = windSpeed.to_dataset()
    varname = list(myWindSpeed.keys())[0]

    strANtime    = str(myWindSpeed.time.data)
    strValidTime = str(myWindSpeed.valid_time.data)
    
    strFcStep    = str(np.timedelta64(myWindSpeed.step.data,'h')).replace(" ", "")

    data2Plot = myWindSpeed[varname].data
    mylat     = myWindSpeed.latitude.data
    mylon     = myWindSpeed.longitude.data
    strUnits  = myWindSpeed[varname].attrs['units']

    #print('  Var name extracted: {0}'.format(varname))
    #print('  units: {0}'.format(strUnits))
    #print('  AN time: {0}'.format(strANtime))
    #print('  Valid time: {0}'.format(strValidTime))
    #print('  FC step: {0}'.format(strFcStep))

    myMinT   = int(np.nanmin(data2Plot))
    myMaxT   = int(np.nanmax(data2Plot))
    myMeanT  = int(np.nanmean(data2Plot))

    strStats = 'min/max/mean: ' + str(myMinT) + '/' + str(myMaxT) + '/' + str(myMeanT)
    
    myMin  = 0
    myMax  = int(np.nanmax(data2Plot))
    myStep = 2

    width_F  = 12
    height_F = 16
    plt.figure(figsize=(width_F,height_F),dpi=100)

    # wind speed
    ax = plt.subplot(2, 1, 1, projection=ccrs.PlateCarree())

    plt.title('10m wind (' + strUnits +') - AN time/FC step: ' + strANtime + '/' + strFcStep + '\n ' + strStats)
    
    if minmapWS is not None: 
        myMin = int(minmapWS)
    
    if maxmapWS is not None: 
        myMax = int(maxmapWS)
    
    if stepmapWS is not None:
        myStep = int(stepmapWS)
    
    bounds = np.arange(myMin,myMax,myStep)

    strCmap = 'jet'
    #im = plt.contourf(mylon, mylat,data2Plot, 60,transform=ccrs.PlateCarree())
    im = plt.pcolormesh(mylon, mylat,data2Plot, transform=ccrs.PlateCarree(),cmap=strCmap, vmin=bounds[0], vmax=bounds[len(bounds)-1])                    
    ax.coastlines()
    ax.gridlines(draw_labels=["top", "left"])

    if bbox is not None: 
        ax.set_extent(bbox, crs=ccrs.PlateCarree())
    
    plt.colorbar(im, location='bottom', boundaries=bounds,ticks=bounds,extend='both',shrink=0.7, pad=0.06) 
    ##############
    myWindGust  = windGust.to_dataset()
    varname = list(myWindGust.keys())[0]

    strANtime    = str(myWindGust.time.data)
    strValidTime = str(myWindGust.valid_time.data)
    
    strFcStep    = str(np.timedelta64(myWindGust.step.data,'h')).replace(" ", "")

    data2Plot = myWindGust[varname].data
    mylat     = myWindGust.latitude.data
    mylon     = myWindGust.longitude.data
    strUnits  = myWindGust[varname].attrs['units']

    #print('  Var name extracted: {0}'.format(varname))
    #print('  units: {0}'.format(strUnits))

    myMinT   = int(np.nanmin(data2Plot))
    myMaxT   = int(np.nanmax(data2Plot))
    myMeanT  = int(np.nanmean(data2Plot))

    strStats = 'min/max/mean: ' + str(myMinT) + '/' + str(myMaxT) + '/' + str(myMeanT)    
    
    myMin  = 0
    myMax  = int(np.nanmax(data2Plot))
    myStep = 2
    
    ax = plt.subplot(2, 1, 2, projection=ccrs.PlateCarree())

    plt.title('Wind gusts (' + strUnits +') - AN time/FC step: ' + strANtime + '/' + strFcStep + '\n ' + strStats)
    
    if minmapWG is not None: 
        myMin = int(minmapWG)
    
    if maxmapWG is not None: 
        myMax = int(maxmapWG)
    
    if stepmapWG is not None:
        myStep = int(stepmapWG)
    
    bounds = np.arange(myMin,myMax,myStep)

    #im = plt.contourf(mylon, mylat,data2Plot, 60,transform=ccrs.PlateCarree())
    im = plt.pcolormesh(mylon, mylat,data2Plot, transform=ccrs.PlateCarree(),cmap=strCmap, vmin=bounds[0], vmax=bounds[len(bounds)-1])                    
    ax.coastlines()
    ax.gridlines(draw_labels=["top", "left"])
    
    if bbox is not None: 
        ax.set_extent(bbox, crs=ccrs.PlateCarree())


    plt.colorbar(im, location='bottom', boundaries=bounds,ticks=bounds,extend='both',shrink=0.7, pad=0.06) 

    #############################################
    if not os.path.exists(pathDiagPlots):
        os.makedirs(pathDiagPlots)
            
    myPng = 'winds.AN'+strANtime+'.FC'+strFcStep+'.png'

    plotname = os.path.join(pathDiagPlots, myPng)    
    plt.savefig(plotname)

    print('wind map saved as: ' +plotname)

    plt.close()
    #plt.ioff()

    return None
###################################
# winds plot
###################################
def plot_winds_from_grb_ec (pathDiagPlots, grbFile, 
                         minmapWS=None, maxmapWS=None, stepmapWS=None,
                         minmapWG=None, maxmapWG=None, stepmapWG=None,
                         bbox=None):
    
    myFC = mv.read(grbFile) 

    u_10m =  myFC.select(shortName='10u')
    v_10m =  myFC.select(shortName='10v')
    windSpeed = mv.sqrt(u_10m*u_10m + v_10m*v_10m)
    
    windGust =  myFC.select(shortName='10fg')
    
    myWindSpeed  = windSpeed.to_dataset()
    varname = list(myWindSpeed.keys())[0]

    strANtime    = str(myWindSpeed.time.data)
    strValidTime = str(myWindSpeed.valid_time.data)
    
    strFcStep    = str(np.timedelta64(myWindSpeed.step.data,'h')).replace(" ", "")

    data2Plot = myWindSpeed[varname].data
    mylat     = myWindSpeed.latitude.data
    mylon     = myWindSpeed.longitude.data
    strUnits  = myWindSpeed[varname].attrs['units']

    #print('  Var name extracted: {0}'.format(varname))
    #print('  units: {0}'.format(strUnits))
    #print('  AN time: {0}'.format(strANtime))
    #print('  Valid time: {0}'.format(strValidTime))
    #print('  FC step: {0}'.format(strFcStep))

    myMinT   = int(np.nanmin(data2Plot))
    myMaxT   = int(np.nanmax(data2Plot))
    myMeanT  = int(np.nanmean(data2Plot))

    strStats = 'min/max/mean: ' + str(myMinT) + '/' + str(myMaxT) + '/' + str(myMeanT)
    
    myMin  = 0
    myMax  = int(np.nanmax(data2Plot))
    myStep = 2

    width_F  = 12
    height_F = 16
    plt.figure(figsize=(width_F,height_F),dpi=100)

    # wind speed
    ax = plt.subplot(2, 1, 1, projection=ccrs.PlateCarree())

    plt.title('10m wind (' + strUnits +') - AN time/FC step: ' + strANtime + '/' + strFcStep + '\n ' + strStats)
    
    if minmapWS is not None: 
        myMin = int(minmapWS)
    
    if maxmapWS is not None: 
        myMax = int(maxmapWS)
    
    if stepmapWS is not None:
        myStep = int(stepmapWS)
    
    bounds = np.arange(myMin,myMax,myStep)

    strCmap = 'jet'
    #im = plt.contourf(mylon, mylat,data2Plot, 60,transform=ccrs.PlateCarree())
    im = plt.pcolormesh(mylon, mylat,data2Plot, transform=ccrs.PlateCarree(),cmap=strCmap, vmin=bounds[0], vmax=bounds[len(bounds)-1])                    
    ax.coastlines()
    ax.gridlines(draw_labels=["top", "left"])

    if bbox is not None: 
        ax.set_extent(bbox, crs=ccrs.PlateCarree())
    
    plt.colorbar(im, location='bottom', boundaries=bounds,ticks=bounds,extend='both',shrink=0.7, pad=0.06) 
    ##############
    myWindGust  = windGust.to_dataset()
    varname = list(myWindGust.keys())[0]

    strANtime    = str(myWindGust.time.data)
    strValidTime = str(myWindGust.valid_time.data)
    
    strFcStep    = str(np.timedelta64(myWindGust.step.data,'h')).replace(" ", "")

    data2Plot = myWindGust[varname].data
    mylat     = myWindGust.latitude.data
    mylon     = myWindGust.longitude.data
    strUnits  = myWindGust[varname].attrs['units']

    #print('  Var name extracted: {0}'.format(varname))
    #print('  units: {0}'.format(strUnits))

    myMinT   = int(np.nanmin(data2Plot))
    myMaxT   = int(np.nanmax(data2Plot))
    myMeanT  = int(np.nanmean(data2Plot))

    strStats = 'min/max/mean: ' + str(myMinT) + '/' + str(myMaxT) + '/' + str(myMeanT)    
    
    myMin  = 0
    myMax  = int(np.nanmax(data2Plot))
    myStep = 2
    
    ax = plt.subplot(2, 1, 2, projection=ccrs.PlateCarree())

    plt.title('Wind gusts (' + strUnits +') - AN time/FC step: ' + strANtime + '/' + strFcStep + '\n ' + strStats)
    
    if minmapWG is not None: 
        myMin = int(minmapWG)
    
    if maxmapWG is not None: 
        myMax = int(maxmapWG)
    
    if stepmapWG is not None:
        myStep = int(stepmapWG)
    
    bounds = np.arange(myMin,myMax,myStep)

    #im = plt.contourf(mylon, mylat,data2Plot, 60,transform=ccrs.PlateCarree())
    im = plt.pcolormesh(mylon, mylat,data2Plot, transform=ccrs.PlateCarree(),cmap=strCmap, vmin=bounds[0], vmax=bounds[len(bounds)-1])                    
    ax.coastlines()
    ax.gridlines(draw_labels=["top", "left"])
    
    if bbox is not None: 
        ax.set_extent(bbox, crs=ccrs.PlateCarree())


    plt.colorbar(im, location='bottom', boundaries=bounds,ticks=bounds,extend='both',shrink=0.7, pad=0.06) 

    #############################################
    if not os.path.exists(pathDiagPlots):
        os.makedirs(pathDiagPlots)
            
    myPng = 'winds.AN'+strANtime+'.FC'+strFcStep+'.png'

    plotname = os.path.join(pathDiagPlots, myPng)    
    plt.savefig(plotname)

    print('wind map saved as: ' +plotname)

    plt.close()
    #plt.ioff()

    return None

